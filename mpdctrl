#!/usr/bin/perl -w
use strict;
use warnings;
use utf8;
use Audio::MPD();
use File::Basename();
use POSIX();
use Storable();
use File::Copy();
use IO::Socket();
use Net::hostent();


chdir(  File::Basename::dirname( $0 )  );
require Logger;

my $PORT = 8061;
my $MUSIC_DIR = "/media/music/good";
my $SORTOUT_DIR = "/media/music/sortout";
my $ERROR_DIR = "/media/music/error";
my $SORTOUT_FILE = "/var/cache/mpd-sortout-file";


my $m_nCurSong = -1;
my $m_nTimeTotal = 0;
my $m_nTimeElapsed = 0;
my $m_szCurSong = "";
my $m_szLastSong = "";
my $m_szState = "";

Logger->GetInstance()->Write( undef, 2, "Connecting to MPD ...");
my $objMPD;
while (1)
{
	eval
	{
		$objMPD = new Audio::MPD('conntype' => $Audio::MPD::REUSE);
	};
	
	if ($@)
	{
		Logger->GetInstance()->Write( undef, 1, "MPD not available: $@" );
		sleep 2;
	}
	else
	{
		last;
	}
}

while ($objMPD->ping() != 0)
{
	sleep 1;
}
Logger->GetInstance()->Write( undef, 2, "MPD Connected" );

do
{
	$objMPD->play();
}
while ($objMPD->status->state() ne "play");


my $pobjServer = IO::Socket::INET->new(
	'Proto'		=> "tcp",
	'LocalPort'	=> $PORT,
	'Listen'	=> $IO::Socket::INET::SOMAXCONN,
	'Reuse'		=> 1
	);

Logger->GetInstance()->Write( undef, 0, "Can't setup server on port $PORT" ) unless $pobjServer;

Logger->GetInstance()->Write( undef, 2, "Server is listening on port $PORT" );


while ( my $pobjClient = $pobjServer->accept() )
{
	$pobjClient->autoflush(1);
	
	my $szHostInfo = Net::hostent::gethostbyaddr( $pobjClient->peeraddr );
	Logger->GetInstance()->Write(  undef, 2, sprintf "Connect from %s", $szHostInfo ? $szHostInfo->name() : $pobjClient->peerhost()  );
	
	my $szCommand = "";
	$pobjClient->recv( $szCommand, 128 );
	
	Logger->GetInstance()->Write( undef, 2, "Command '$szCommand' received" );

	if ($szCommand eq "play")
	{
		$objMPD->play();
	}
	elsif ($szCommand eq "pause")
	{
		$objMPD->pause();
	}
	elsif ($szCommand eq "next")
	{
		NextTrack();
	}
	elsif ($szCommand eq "rmerr")
	{
		MoveDefectTrack(0);
	}
	elsif ($szCommand eq "rmlasterr")
	{
		MoveDefectTrack(1);
	}
}

sub NextTrack
{
	my $szMusicFile = $objMPD->current->file();
	
	$objMPD->next();
	
	my %mpfSortOutFiles = ();
	if (-f $SORTOUT_FILE)
	{
		%mpfSortOutFiles = %{  Storable::retrieve( $SORTOUT_FILE ) };
	}
	
	if ( (defined $mpfSortOutFiles{$szMusicFile}) and ($mpfSortOutFiles{$szMusicFile} == 1) )
	{
		MoveFile( $szMusicFile, $SORTOUT_DIR );
		
		delete $mpfSortOutFiles{$szMusicFile};
	}
	else
	{
		Logger->GetInstance()->Write( undef, 2, "Das Lied '$szMusicFile' wird gespeichert und beim nÃ¤chsten Weiterschalten aussortiert" );
		$mpfSortOutFiles{$szMusicFile} = 1;
	}
	
	Storable::store( \%mpfSortOutFiles, $SORTOUT_FILE );
}

sub MoveDefectTrack
{
	my ($fLastFile) = @_;
	
	# TODO use idle events to save the last song in back ground
	my $szFile = $m_szLastSong;
	if ($fLastFile == 0)
	{
		$szFile = $objMPD->current->file();
		$objMPD->next();
	}
	
	MoveFile( $szFile, $ERROR_DIR );
}

sub MoveFile
{
	my ($szMusicFile, $szDestDir) = @_;
	
	my $szSrcFile = $MUSIC_DIR . "/" . $szMusicFile;
	my $szDestFile = $szDestDir . "/" . File::Basename::basename($szSrcFile);
	
	Logger->GetInstance()->Write( undef, 2, "Das Lied '$szSrcFile' wird nach '$szDestFile' verschoben" );	
	File::Copy::move ( $szSrcFile, $szDestFile );
}
